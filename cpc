#!/bin/bash

# =============================================================================
# CPC (Cluster Provision & Configure) - Main Script
# =============================================================================
# Enhanced with modular architecture for better maintainability

# CPC Version
export CPC_VERSION="1.2.0"

# Color definitions (kept for backward compatibility)
export GREEN='\033[32m'
export RED='\033[0;31m'
export YELLOW='\033[0;33m'
export BLUE='\033[1;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export WHITE='\033[1;37m'
export ENDCOLOR='\033[0m'

# --- Load Modular Architecture ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Load configuration first
if [ -f "$SCRIPT_DIR/config.conf" ]; then
  source "$SCRIPT_DIR/config.conf"
fi

# Load libraries
for lib in "$SCRIPT_DIR/lib"/*.sh; do
  [ -f "$lib" ] && source "$lib"
done

# Load modules
for module in "$SCRIPT_DIR/modules"/*.sh; do
  [ -f "$module" ] && source "$module"
done

# Set REPO_PATH for modules
export REPO_PATH="$SCRIPT_DIR"

# Configuration (legacy, will be moved to config.conf)
CONFIG_DIR="$HOME/.config/cpc" # Updated for CreatePersonalCluster project
REPO_PATH_FILE="$CONFIG_DIR/repo_path"
CPC_CONTEXT_FILE="$CONFIG_DIR/current_cluster_context"
CPC_ENV_FILE="cpc.env" # Expect this in the repo root, Changed from CCR_ENV_FILE and ccr.env

# --- Initialize Error Handling Systems ---
error_init
retry_init
timeout_init
recovery_init

# --- Helper Functions ---
check_required_commands() {
  for cmd in "$@"; do
    if ! error_validate_command_exists "$cmd"; then
      return 1
    fi
  done
}
export -f check_required_commands

# Check if secrets are already loaded
check_secrets_loaded() {
  if [ -z "$PROXMOX_HOST" ] || [ -z "$PROXMOX_USERNAME" ] || [ -z "$VM_USERNAME" ] || [ -z "$HARBOR_HOSTNAME" ]; then
    echo -e "${RED}Error: Secrets not loaded. This command requires SOPS secrets to be loaded.${ENDCOLOR}" >&2
    echo -e "${BLUE}Please run 'cpc load_secrets' first or ensure cpc.env is properly configured.${ENDCOLOR}" >&2
    exit 1
  fi
}
export -f check_secrets_loaded

display_usage() {
  echo "Usage: cpc <command> [options]"
  echo ""
  echo "Commands:"
  echo "  setup-cpc                      Initial setup for cpc command."
  echo "  ctx [<cluster_name>]           Get or set the current cluster context (Tofu workspace)."
  echo "  list-workspaces                List all available workspaces."
  echo "  clone-workspace <src> <dst>    Clone a workspace environment to create a new one."
  echo "  delete-workspace <n>           Delete a workspace environment."
  echo "  template                       Creates a VM template for Kubernetes"
  echo "  run-playbook <playbook>        Run any Ansible playbook from ansible/playbooks/"
  echo "  run-command <target> \"<cmd>\"   Run a shell command on target host(s) or group."
  echo "  clear-ssh-hosts                Clear VM IP addresses from ~/.ssh/known_hosts"
  echo "  clear-ssh-maps                 Clear SSH control sockets and connections for VMs"
  echo "  load_secrets                   Load secrets and output environment variables for sourcing"
  echo "  auto                           Load all environment variables and output export commands for shell sourcing"
  echo "  cpc-auto                       Simple wrapper script to load environment variables into current shell"
  echo "  clear-cache                    Clear all cached secrets and status data."
  echo "  dns-pihole <action>            Manage Pi-hole DNS records. Actions: list, add, unregister-dns, interactive-add, interactive-unregister."
  echo "  generate-hostnames             Generate hostname configurations for VMs in Proxmox"
  echo "  scripts/<script_name>          Run any script from the scripts directory"
  echo "  deploy <tofu_cmd> [opts]       Run any 'tofu' command (e.g., plan, apply, output) in context."
  echo "  workspace <ws_cmd> [opts]      Run tofu workspace commands (e.g., list, select, show)."
  echo "  cluster-info [--quick|-q]         Show simplified cluster information (VM_ID, hostname, IP). Use --quick for cached data."
  echo ""
  echo "VM Management:"
  echo "  add-vm                         Interactively add a new VM (worker or control plane)."
  echo "  remove-vm                      Interactively remove a VM and update configuration."
  echo "  start-vms                      Start all VMs in the current context."
  echo "  stop-vms                       Stop all VMs in the current context."
  echo "  vmctl                          (Placeholder) Suggests using Tofu for VM control."
  echo ""
  echo "Kubernetes Management:"
  echo "  bootstrap                      Bootstrap a complete Kubernetes cluster on deployed VMs"
  echo "  get-kubeconfig                 Retrieve and merge Kubernetes cluster config into local kubeconfig."
  echo "  prepare-node <node>            Install Kubernetes components on a new VM before joining cluster."
  echo "  update-inventory               Update Ansible inventory cache from current cluster state."
  echo "  add-nodes                      Add new worker nodes to the cluster."
  echo "  remove-nodes                   Remove nodes from the Kubernetes cluster."
  echo "  drain-node <node_name>         Drain workloads from a node."
  echo "  uncordon-node <node_name>      Uncordon a node to allow new pods to be scheduled."
  echo "  upgrade-node <node_name>       Upgrade Kubernetes on a specific node."
  echo "  reset-node <node_name>         Reset Kubernetes on a specific node."
  echo "  reset-all-nodes                Reset Kubernetes on all nodes in the current context."
  echo "  upgrade-addons                 Install/upgrade cluster addons with interactive menu (CNI, MetalLB, cert-manager, ArgoCD, etc.)."
  echo "  configure-coredns              Configure CoreDNS to forward local domain queries to Pi-hole DNS server."
  echo "  upgrade-k8s                    Upgrade Kubernetes control plane."
  echo "  status|cluster-status          Check Kubernetes cluster status and health."
  echo "  quick-status|qs                Fast status check (K8s only, no VM/SSH checks)."
  echo ""
  echo "DNS/SSL Management:"
  echo "  regenerate-certificates        Regenerate Kubernetes certificates with DNS hostname support"
  echo "  test-dns <domain>              Test DNS resolution within the cluster"
  echo "  verify-certificates            Verify SSL certificate validity and SANs"
  echo "  check-cluster-dns              Comprehensive cluster DNS functionality check"
  echo "  inspect-cert <cert-path>       Inspect specific certificate file details"
  echo ""
  echo "Global Options:"
  echo "  --debug, -d                   Enable debug output for troubleshooting"
  echo "  --verbose, -v                Enable verbose output"
  echo "  --help, -h                   Show this help message"
  echo ""
  echo "Use 'cpc <command> --help' for more details on a specific command."
}

# --- Main Script Logic ---

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# Check for essential commands early
check_required_commands "ansible-playbook" "ansible-inventory" "tofu" "kubectl" "jq"

# Parse global flags first
DEBUG_FLAG=""
VERBOSE_FLAG=""
while [[ $# -gt 0 ]]; do
  case $1 in
    --debug|-d)
      export CPC_DEBUG=true
      DEBUG_FLAG="--debug"
      shift
      ;;
    --verbose|-v)
      export CPC_VERBOSE=true
      VERBOSE_FLAG="--verbose"
      shift
      ;;
    --help|-h)
      display_usage
      exit 0
      ;;
    --version)
      echo "CPC (Create Personal Cluster) v${CPC_VERSION}"
      echo "Infrastructure as Code Kubernetes Cluster Management"
      echo "Built with Terraform/OpenTofu + Ansible + Proxmox VE"
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

COMMAND="$1"
shift # Remove command from arguments, rest are options

# Function to automatically load secrets for commands that need them
auto_load_secrets() {
  local command="$1"
  
  # Commands that DON'T require secrets (exclude these)
  local no_secret_commands=(
    "setup-cpc" "help" "-h" "--help" "" "version"
  )
  
  # Check if command should NOT load secrets
  for no_secret_cmd in "${no_secret_commands[@]}"; do
    if [[ "$command" == "$no_secret_cmd" ]]; then
      return 0
    fi
  done
  
  # Load secrets for all other commands
  if ! load_secrets_cached >/dev/null 2>&1; then
    log_error "Failed to load secrets automatically. Use 'cpc load_secrets' manually."
    return 1
  fi
  
  return 0
}

# Handle quick-status early to avoid secrets loading
if [[ "$COMMAND" == "quick-status" || "$COMMAND" == "qs" ]]; then
  echo -e "${CYAN}=== Quick Status (No Secrets) ===${ENDCOLOR}"
  current_workspace=""
  if [[ -f "$CPC_CONTEXT_FILE" ]]; then
    current_workspace=$(cat "$CPC_CONTEXT_FILE")
    echo "Workspace: ${current_workspace}"
  else
    echo "Workspace: Not set"
  fi
  
  # Quick K8s check only
  if kubectl cluster-info &>/dev/null; then
    nodes=$(kubectl get nodes --no-headers 2>/dev/null | wc -l)
    echo -e "${GREEN}K8s nodes: $nodes${ENDCOLOR}"
  else
    echo -e "${RED}K8s: Not accessible${ENDCOLOR}"
  fi
  exit 0
fi

# Handle cluster-info --quick early to avoid secrets loading
if [[ "$COMMAND" == "cluster-info" && ("$1" == "--quick" || "$1" == "-q") ]]; then
  current_ctx=""
  if [[ -f "$CPC_CONTEXT_FILE" ]]; then
    current_ctx=$(cat "$CPC_CONTEXT_FILE")
  else
    echo "Error: No cluster context set. Use 'cpc ctx <workspace>' first."
    exit 1
  fi

  cache_file="/tmp/cpc_status_cache_${current_ctx}"
  cluster_summary=""
  
  if [[ -f "$cache_file" ]]; then
    cache_age=$(($(date +%s) - $(stat -c %Y "$cache_file" 2>/dev/null || echo 0)))
    if [[ $cache_age -lt 300 ]]; then  # 5 minute cache for quick mode
      cluster_summary=$(cat "$cache_file" 2>/dev/null)
      echo "=== Quick Cluster Information (Cached) ==="
    fi
  fi
  
  if [[ -z "$cluster_summary" || "$cluster_summary" == "null" ]]; then
    echo "⚠️  No cached cluster data available. Run 'cpc cluster-info' first or 'cpc status' to populate cache."
    exit 1
  fi
  
  # Display cached data
  echo
  printf "%-25s %-15s %-20s %s\n" "NODE" "VM_ID" "HOSTNAME" "IP"
  printf "%-25s %-15s %-20s %s\n" "----" "-----" "--------" "--"
  echo "$cluster_summary" | jq -r 'to_entries[] | [.key, .value.VM_ID, .value.hostname, .value.IP] | @tsv' | \
    while IFS=$'\t' read -r node vm_id hostname ip; do
      printf "%-25s %-15s %-20s %s\n" "$node" "$vm_id" "$hostname" "$ip"
    done
  echo
  exit 0
fi

# Load REPO_PATH and environment variables if possible
if [[ "$COMMAND" != "setup-cpc" ]]; then
  REPO_PATH=$(get_repo_path)
  export REPO_PATH
  # Load environment variables from workspace .env file
  load_env_vars >/dev/null 2>&1
fi

# Auto-load secrets for commands that need them (silent operation)
# Also load for empty command (just ./cpc) and help commands
if [[ "$COMMAND" != "setup-cpc" ]]; then
  auto_load_secrets "$COMMAND" || exit 1
fi

case "$COMMAND" in
setup-cpc) # Changed from setup-ccr
  cpc_core setup-cpc "$@"
  ;;

get-kubeconfig)
  cpc_k8s_cluster get-kubeconfig "$@"
  ;;

add-vm)
  cpc_proxmox add-vm "$@"
  ;;

remove-vm)
  cpc_proxmox remove-vm "$@"
  ;;

ctx)
  cpc_core ctx "$@"
  ;;

list-workspaces)
  cpc_core list-workspaces "$@"
  ;;

clone-workspace)
  cpc_workspace_ops clone-workspace "$@"
  ;;

delete-workspace)
  cpc_workspace_ops delete-workspace "$@"
  ;;

template)
  cpc_proxmox template "$@"
  ;;

load_secrets)
  cpc_core load_secrets "$@"
  ;;

auto)
  cpc_core auto "$@"
  ;;

clear-cache)
  clear_all_caches "$@"
  ;;

deploy)
  cpc_tofu deploy "$@"
  ;;

workspace)
  cpc_tofu workspace "$@"
  ;;

bootstrap)
  cpc_k8s_cluster bootstrap "$@"
  ;;

run-playbook)
  cpc_ansible run-ansible "$@"
  ;;

clear-ssh-hosts)
  cpc_ssh clear-ssh-hosts "$@"
  ;;

clear-ssh-maps)
  cpc_ssh clear-ssh-maps "$@"
  ;;

add-nodes)
  cpc_k8s_nodes add "$@"
  ;;

prepare-node)
  cpc_k8s_nodes prepare "$@"
  ;;

update-inventory)
  cpc_ansible update-inventory "$@"
  ;;

remove-nodes)
  cpc_k8s_nodes remove "$@"
  ;;

drain-node)
  cpc_k8s_nodes drain "$@"
  ;;

uncordon-node)
  cpc_k8s_nodes uncordon "$@"
  ;;

upgrade-node)
  cpc_k8s_nodes upgrade "$@"
  ;;

reset-node)
  cpc_k8s_nodes reset "$@"
  ;;

reset-all-nodes)
  cpc_k8s_nodes reset-all "$@"
  ;;

upgrade-addons)
  cpc_cluster_ops upgrade-addons "$@"
  ;;

upgrade-k8s)
  cpc_k8s_cluster upgrade-k8s "$@"
  ;;

status | cluster-status)
  cpc_k8s_cluster status "$@"
  ;;

vmctl)
  cpc_proxmox vmctl "$@"
  ;;

run-command)
  cpc_ansible run-command "$@"
  ;;

dns-pihole)
  cpc_dns_pihole "$@"
  ;;

cluster-info)
  cpc_tofu cluster-info "$@"
  ;;

deploy)
  cpc_tofu deploy "$@"
  ;;

generate-hostnames)
  cpc_tofu generate-hostnames "$@"
  ;;

run-ansible)
  cpc_ansible run-ansible "$@"
  ;;

gen_hostnames)
  cpc_tofu gen_hostnames "$@"
  ;;

start-vms)
  cpc_tofu start-vms "$@"
  ;;

configure-coredns)
  cpc_cluster_ops configure-coredns "$@"
  ;;

# DNS/SSL commands
regenerate-certificates | regenerate-cert)
  cpc_dns_ssl regenerate-certificates "$@"
  ;;

test-dns | test-resolution)
  cpc_dns_ssl test-dns "$@"
  ;;

verify-certificates | verify-cert | check-cert)
  cpc_dns_ssl verify-certificates "$@"
  ;;

check-cluster-dns | test-cluster-dns)
  cpc_dns_ssl check-cluster-dns "$@"
  ;;

inspect-cert | show-cert)
  cpc_dns_ssl inspect-cert "$@"
  ;;

stop-vms)
  cpc_tofu stop-vms "$@"
  ;;

"" | "-h" | "--help" | "help")
  display_usage
  ;;

scripts/*)
  # Handle running scripts directly: ./cpc scripts/script_name.sh
  script_path="$REPO_PATH/$COMMAND"
  if [[ -f "$script_path" && -x "$script_path" ]]; then
    echo -e "${BLUE}Running script: $script_path${ENDCOLOR}"
    # Pass all remaining arguments to the script
    "$script_path" "$@"
  elif [[ -f "$script_path" ]]; then
    echo -e "${RED}Error: Script $script_path exists but is not executable.${ENDCOLOR}" >&2
    echo -e "${BLUE}Try: chmod +x $script_path${ENDCOLOR}" >&2
    exit 1
  else
    echo -e "${RED}Error: Script not found at $script_path${ENDCOLOR}" >&2
    exit 1
  fi
  ;;

# Legacy aliases for backward compatibility
add-node)
  echo -e "${YELLOW}Warning: 'add-node' is deprecated. Use 'add-vm' instead.${ENDCOLOR}"
  shift
  set -- "add-vm" "$@"
  exec "$0" "$@"
  ;;

remove-node)
  echo -e "${YELLOW}Warning: 'remove-node' is deprecated. Use 'remove-vm' instead.${ENDCOLOR}"
  shift
  set -- "remove-vm" "$@"
  exec "$0" "$@"
  ;;

update-pihole)
  echo -e "${YELLOW}Warning: 'update-pihole' is deprecated. Use 'dns-pihole' instead.${ENDCOLOR}"
  shift
  set -- "dns-pihole" "$@"
  exec "$0" "$@"
  ;;

delete-node)
  echo -e "${YELLOW}Warning: 'delete-node' is deprecated. Use 'remove-nodes' instead.${ENDCOLOR}"
  # Pass all arguments as is to remove-nodes
  set -- "remove-nodes" "$@"
  exec "$0" "$@"
  ;;

*)
    echo -e "${RED}Unknown command: $COMMAND${ENDCOLOR}" >&2
    display_usage
    exit 1
    ;;
esac

exit 0
