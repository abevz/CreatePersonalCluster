#!/bin/bash
# =============================================================================
# CPC Error Handling Test Suite
# =============================================================================
# Tests for the new error handling, retry, timeout, and recovery systems

# Source the main cpc script to load all libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "ðŸ§ª Testing CPC Error Handling Systems"
echo "===================================="

# Load libraries directly instead of sourcing cpc
for lib in "$SCRIPT_DIR/lib"/*.sh; do
  [ -f "$lib" ] && source "$lib"
done

# Initialize systems
error_init
retry_init
timeout_init
recovery_init

# Test 1: Error handling system
echo ""
echo "Test 1: Error Handling System"
echo "-----------------------------"

error_init
echo "âœ“ Error system initialized"

error_push "$ERROR_NETWORK" "Test network error" "$SEVERITY_MEDIUM" "test_context"
echo "âœ“ Error pushed to stack"

error_count=$(error_get_count)
echo "âœ“ Error count: $error_count"

error_report="/tmp/test_error_report.txt"
error_generate_report "$error_report"
echo "âœ“ Error report generated: $error_report"

# Test 2: Retry system
echo ""
echo "Test 2: Retry System"
echo "--------------------"

retry_init
echo "âœ“ Retry system initialized"

# Test successful retry
retry_execute "echo 'Success'" 2 1 10 "" "Test successful command"
echo "âœ“ Successful retry test completed"

# Test failed retry (will fail after retries)
retry_execute "false" 2 1 10 "" "Test failing command"
echo "âœ“ Failed retry test completed (expected to fail)"

retry_stats=$(retry_get_stats)
echo "âœ“ Retry statistics: $retry_stats"

# Test 3: Timeout system
echo ""
echo "Test 3: Timeout System"
echo "----------------------"

timeout_init
echo "âœ“ Timeout system initialized"

# Test successful timeout
timeout_execute "sleep 1" 5 "Test short command"
echo "âœ“ Short command with timeout completed"

# Test timeout (will timeout)
timeout_execute "sleep 10" 2 "Test long command"
echo "âœ“ Long command timed out as expected"

# Test 4: Recovery system
echo ""
echo "Test 4: Recovery System"
echo "-----------------------"

recovery_init
echo "âœ“ Recovery system initialized"

recovery_checkpoint "test_checkpoint" "test_data"
echo "âœ“ Recovery checkpoint created"

# Test successful recovery operation
recovery_execute "echo 'Success'" "test_operation" "echo 'Rollback'" "true"
echo "âœ“ Successful recovery operation completed"

recovery_state=$(recovery_get_state)
echo "âœ“ Recovery state: $recovery_state"

recovery_report="/tmp/test_recovery_report.txt"
recovery_generate_report "$recovery_report"
echo "âœ“ Recovery report generated: $recovery_report"

# Test 5: Command validation
echo ""
echo "Test 5: Command Validation"
echo "--------------------------"

if error_validate_command_exists "echo"; then
    echo "âœ“ Command validation passed for 'echo'"
else
    echo "âœ— Command validation failed for 'echo'"
fi

if ! error_validate_command_exists "nonexistent_command"; then
    echo "âœ“ Command validation correctly failed for nonexistent command"
else
    echo "âœ— Command validation should have failed for nonexistent command"
fi

# Test 6: File validation
echo ""
echo "Test 6: File Validation"
echo "-----------------------"

if error_validate_file "$SCRIPT_DIR/cpc"; then
    echo "âœ“ File validation passed for cpc script"
else
    echo "âœ— File validation failed for cpc script"
fi

if ! error_validate_file "/nonexistent/file"; then
    echo "âœ“ File validation correctly failed for nonexistent file"
else
    echo "âœ— File validation should have failed for nonexistent file"
fi

echo ""
echo "ðŸŽ‰ All Error Handling Tests Completed!"
echo "====================================="
echo ""
echo "Test reports generated:"
echo "  - Error report: $error_report"
echo "  - Recovery report: $recovery_report"
echo ""
echo "You can examine these files to see detailed error and recovery information."
