# Description: Seccomp (secure computing mode) for filtering system calls in containers
# Category: security
# Version: 1.0.0
# Dependencies: linux kernel with seccomp support
# Maintainer: CPC Team

---
- name: Install/Configure Seccomp
  when: addon_name in ['seccomp', 'all']
  delegate_to: "{{ groups['control_plane'][0] }}"
  block:
    - name: Check if Seccomp is available
      ansible.builtin.shell: |
        if grep -q seccomp /proc/version; then
          echo "available"
        else
          echo "not_available"
        fi
      register: seccomp_check
      changed_when: false

    - name: Create Seccomp profiles directory
      ansible.builtin.file:
        path: /var/lib/kubelet/seccomp/profiles
        state: directory
        mode: '0755'
        recurse: yes
      when: seccomp_check.stdout == "available"

    - name: Create default restricted seccomp profile
      ansible.builtin.copy:
        content: |
          {
            "defaultAction": "SCMP_ACT_ERRNO",
            "archMap": [
              {
                "architecture": "SCMP_ARCH_X86_64",
                "subArchitectures": [
                  "SCMP_ARCH_X86",
                  "SCMP_ARCH_X32"
                ]
              }
            ],
            "syscalls": [
              {
                "names": [
                  "accept",
                  "accept4",
                  "access",
                  "adjtimex",
                  "alarm",
                  "bind",
                  "brk",
                  "chdir",
                  "chmod",
                  "chown",
                  "chown32",
                  "clock_adjtime",
                  "clock_getres",
                  "clock_gettime",
                  "clock_nanosleep",
                  "close",
                  "connect",
                  "copy_file_range",
                  "creat",
                  "dup",
                  "dup2",
                  "dup3",
                  "epoll_create",
                  "epoll_create1",
                  "epoll_ctl",
                  "epoll_ctl_old",
                  "epoll_pwait",
                  "epoll_wait",
                  "epoll_wait_old",
                  "eventfd",
                  "eventfd2",
                  "execve",
                  "execveat",
                  "exit",
                  "exit_group",
                  "faccessat",
                  "fchdir",
                  "fchmod",
                  "fchmodat",
                  "fchown",
                  "fchown32",
                  "fchownat",
                  "fcntl",
                  "fcntl64",
                  "fdatasync",
                  "fgetxattr",
                  "flistxattr",
                  "flock",
                  "fork",
                  "fremovexattr",
                  "fsetxattr",
                  "fstat",
                  "fstat64",
                  "fstatat64",
                  "fstatfs",
                  "fstatfs64",
                  "fsync",
                  "ftruncate",
                  "ftruncate64",
                  "futex",
                  "getcwd",
                  "getdents",
                  "getdents64",
                  "getegid",
                  "getegid32",
                  "geteuid",
                  "geteuid32",
                  "getgid",
                  "getgid32",
                  "getgroups",
                  "getgroups32",
                  "getitimer",
                  "getpeername",
                  "getpgid",
                  "getpgrp",
                  "getpid",
                  "getppid",
                  "getpriority",
                  "getrandom",
                  "getresgid",
                  "getresgid32",
                  "getresuid",
                  "getresuid32",
                  "getrlimit",
                  "get_robust_list",
                  "getrusage",
                  "getsid",
                  "getsockname",
                  "getsockopt",
                  "get_thread_area",
                  "gettid",
                  "gettimeofday",
                  "getuid",
                  "getuid32",
                  "getxattr",
                  "inotify_add_watch",
                  "inotify_init",
                  "inotify_init1",
                  "inotify_rm_watch",
                  "io_cancel",
                  "ioctl",
                  "io_destroy",
                  "io_getevents",
                  "ioprio_get",
                  "ioprio_set",
                  "io_setup",
                  "io_submit",
                  "kill",
                  "lchown",
                  "lchown32",
                  "lgetxattr",
                  "link",
                  "linkat",
                  "listen",
                  "listxattr",
                  "llistxattr",
                  "lremovexattr",
                  "lseek",
                  "lsetxattr",
                  "lstat",
                  "lstat64",
                  "madvise",
                  "memfd_create",
                  "mincore",
                  "mkdir",
                  "mkdirat",
                  "mknod",
                  "mknodat",
                  "mlock",
                  "mlock2",
                  "mlockall",
                  "mmap",
                  "mmap2",
                  "mprotect",
                  "mq_getsetattr",
                  "mq_notify",
                  "mq_open",
                  "mq_timedreceive",
                  "mq_timedsend",
                  "mq_unlink",
                  "mremap",
                  "msgctl",
                  "msgget",
                  "msgrcv",
                  "msgsnd",
                  "msync",
                  "munlock",
                  "munlockall",
                  "munmap",
                  "nanosleep",
                  "newfstatat",
                  "_newselect",
                  "open",
                  "openat",
                  "pause",
                  "pipe",
                  "pipe2",
                  "poll",
                  "ppoll",
                  "prctl",
                  "pread64",
                  "preadv",
                  "prlimit64",
                  "pselect6",
                  "pwrite64",
                  "pwritev",
                  "read",
                  "readahead",
                  "readlink",
                  "readlinkat",
                  "readv",
                  "recv",
                  "recvfrom",
                  "recvmmsg",
                  "recvmsg",
                  "rename",
                  "renameat",
                  "renameat2",
                  "restart_syscall",
                  "rmdir",
                  "rt_sigaction",
                  "rt_sigpending",
                  "rt_sigprocmask",
                  "rt_sigqueueinfo",
                  "rt_sigreturn",
                  "rt_sigsuspend",
                  "rt_sigtimedwait",
                  "rt_tgsigqueueinfo",
                  "sched_getaffinity",
                  "sched_getattr",
                  "sched_getparam",
                  "sched_get_priority_max",
                  "sched_get_priority_min",
                  "sched_getscheduler",
                  "sched_rr_get_interval",
                  "sched_setaffinity",
                  "sched_setattr",
                  "sched_setparam",
                  "sched_setscheduler",
                  "sched_yield",
                  "seccomp",
                  "select",
                  "semctl",
                  "semget",
                  "semop",
                  "semtimedop",
                  "send",
                  "sendfile",
                  "sendfile64",
                  "sendmmsg",
                  "sendmsg",
                  "sendto",
                  "setfsgid",
                  "setfsgid32",
                  "setfsuid",
                  "setfsuid32",
                  "setgid",
                  "setgid32",
                  "setgroups",
                  "setgroups32",
                  "setitimer",
                  "setpgid",
                  "setpriority",
                  "setregid",
                  "setregid32",
                  "setresgid",
                  "setresgid32",
                  "setresuid",
                  "setresuid32",
                  "setreuid",
                  "setreuid32",
                  "setrlimit",
                  "set_robust_list",
                  "setsid",
                  "setsockopt",
                  "set_thread_area",
                  "set_tid_address",
                  "setuid",
                  "setuid32",
                  "setxattr",
                  "shmat",
                  "shmctl",
                  "shmdt",
                  "shmget",
                  "shutdown",
                  "sigaltstack",
                  "signalfd",
                  "signalfd4",
                  "sigreturn",
                  "socket",
                  "socketcall",
                  "socketpair",
                  "splice",
                  "stat",
                  "stat64",
                  "statfs",
                  "statfs64",
                  "statx",
                  "symlink",
                  "symlinkat",
                  "sync",
                  "sync_file_range",
                  "syncfs",
                  "sysinfo",
                  "tee",
                  "tgkill",
                  "time",
                  "timer_create",
                  "timer_delete",
                  "timerfd_create",
                  "timerfd_gettime",
                  "timerfd_settime",
                  "timer_getoverrun",
                  "timer_gettime",
                  "timer_settime",
                  "times",
                  "tkill",
                  "truncate",
                  "truncate64",
                  "ugetrlimit",
                  "umask",
                  "uname",
                  "unlink",
                  "unlinkat",
                  "utime",
                  "utimensat",
                  "utimes",
                  "vfork",
                  "vmsplice",
                  "wait4",
                  "waitid",
                  "waitpid",
                  "write",
                  "writev"
                ],
                "action": "SCMP_ACT_ALLOW"
              }
            ]
          }
        dest: /var/lib/kubelet/seccomp/profiles/restricted.json
        mode: '0644'
      when: seccomp_check.stdout == "available"

    - name: Create audit-only seccomp profile
      ansible.builtin.copy:
        content: |
          {
            "defaultAction": "SCMP_ACT_LOG",
            "archMap": [
              {
                "architecture": "SCMP_ARCH_X86_64",
                "subArchitectures": [
                  "SCMP_ARCH_X86",
                  "SCMP_ARCH_X32"
                ]
              }
            ]
          }
        dest: /var/lib/kubelet/seccomp/profiles/audit.json
        mode: '0644'
      when: seccomp_check.stdout == "available"

    - name: Create example pod with seccomp
      ansible.builtin.copy:
        content: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: seccomp-test-pod
          spec:
            securityContext:
              seccompProfile:
                type: Localhost
                localhostProfile: restricted.json
            containers:
            - name: test-container
              image: busybox:latest
              command: ['sh', '-c', 'echo "Seccomp test pod running"; sleep 3600']
              securityContext:
                allowPrivilegeEscalation: false
                runAsNonRoot: true
                runAsUser: 1000
                capabilities:
                  drop:
                  - ALL
        dest: /tmp/seccomp-test-pod.yaml
        mode: '0644'
      when: seccomp_check.stdout == "available"

    - name: Create audit-only example pod
      ansible.builtin.copy:
        content: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: seccomp-audit-pod
          spec:
            securityContext:
              seccompProfile:
                type: Localhost
                localhostProfile: audit.json
            containers:
            - name: audit-container
              image: busybox:latest
              command: ['sh', '-c', 'echo "Seccomp audit pod - all syscalls logged"; sleep 3600']
              securityContext:
                runAsNonRoot: true
                runAsUser: 1000
        dest: /tmp/seccomp-audit-pod.yaml
        mode: '0644'
      when: seccomp_check.stdout == "available"

    - name: Check seccomp profiles
      ansible.builtin.shell: ls -la /var/lib/kubelet/seccomp/profiles/
      register: seccomp_profiles
      when: seccomp_check.stdout == "available"
      changed_when: false

    - name: Display Seccomp installation result
      ansible.builtin.debug:
        msg:
          - "Seccomp configuration completed"
          - "Seccomp available: {{ seccomp_check.stdout }}"
          - "Profiles directory: /var/lib/kubelet/seccomp/profiles/"
          - "Created profiles: restricted.json, audit.json"
          - "Test pods: /tmp/seccomp-test-pod.yaml, /tmp/seccomp-audit-pod.yaml"
          - "Apply with: kubectl apply -f /tmp/seccomp-test-pod.yaml"
          - "Use seccompProfile.type: Localhost and localhostProfile: <profile.json>"
          - "Monitor logs: journalctl -f | grep audit"
      when: seccomp_check.stdout == "available"

    - name: Display Seccomp unavailable message
      ansible.builtin.debug:
        msg:
          - "Seccomp is not available on this system"
          - "Kernel must be compiled with CONFIG_SECCOMP=y"
          - "Check: grep CONFIG_SECCOMP /boot/config-$(uname -r)"
      when: seccomp_check.stdout == "not_available"
