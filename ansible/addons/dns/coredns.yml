# Description: CoreDNS cluster DNS server upgrade and configuration
# Category: dns
# Version: 1.11.1
# Dependencies: kubernetes
# Maintainer: CPC Team

---
- name: Upgrade CoreDNS
  when: addon_name in ['coredns', 'dns', 'all']
  delegate_to: "{{ groups['control_plane'][0] }}"
  block:
    - name: Get current CoreDNS version
      kubernetes.core.k8s_info:
        kind: Deployment
        name: coredns
        namespace: kube-system
      register: coredns_deployment
      changed_when: false

    - name: Extract current CoreDNS version
      ansible.builtin.set_fact:
        current_coredns_version: "{{ coredns_deployment.resources[0].spec.template.spec.containers[0].image | regex_replace('.*:v(.*)', '\\1') | default('') }}"
      when: coredns_deployment.resources | length > 0

    - name: Set target CoreDNS version
      ansible.builtin.set_fact:
        coredns_target_version: >-
          {{ requested_version if requested_version != '' else (coredns_version | default('1.11.1')) }}

    - name: Check if upgrade is needed
      ansible.builtin.set_fact:
        coredns_upgrade_needed: "{{ current_coredns_version != coredns_target_version }}"

    - name: Backup current CoreDNS ConfigMap
      ansible.builtin.shell: kubectl get configmap coredns -n kube-system -o yaml > /tmp/coredns-backup-$(date +%Y%m%d-%H%M%S).yaml
      when: coredns_upgrade_needed
      changed_when: true

    - name: Update CoreDNS deployment image
      kubernetes.core.k8s_patch:
        kind: Deployment
        name: coredns
        namespace: kube-system
        patch:
          spec:
            template:
              spec:
                containers:
                - name: coredns
                  image: "registry.k8s.io/coredns/coredns:v{{ coredns_target_version }}"
      when: coredns_upgrade_needed
      register: coredns_patch_result

    - name: Wait for CoreDNS rollout to complete
      kubernetes.core.k8s_info:
        kind: Deployment
        name: coredns
        namespace: kube-system
      register: rollout_status
      until: rollout_status.resources[0].status.readyReplicas == rollout_status.resources[0].status.replicas
      retries: 30
      delay: 10
      when: coredns_upgrade_needed

    - name: Verify CoreDNS pods are running
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: kube-system
        label_selectors:
          - k8s-app=kube-dns
      register: coredns_pods
      changed_when: false

    - name: Count running CoreDNS pods
      ansible.builtin.set_fact:
        coredns_pod_count: "{{ coredns_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length }}"

    - name: Test DNS resolution
      ansible.builtin.shell: |
        kubectl run dns-test --image=busybox --rm --restart=Never -- nslookup kubernetes.default.svc.cluster.local
      register: dns_test_result
      changed_when: false
      failed_when: false

    - name: Get final CoreDNS version
      kubernetes.core.k8s_info:
        kind: Deployment
        name: coredns
        namespace: kube-system
      register: final_deployment
      changed_when: false

    - name: Extract final CoreDNS version
      ansible.builtin.set_fact:
        final_coredns_version: "{{ final_deployment.resources[0].spec.template.spec.containers[0].image | regex_replace('.*:v(.*)', '\\1') }}"
      when: final_deployment.resources | length > 0

    - name: Display CoreDNS upgrade result
      ansible.builtin.debug:
        msg:
          - "CoreDNS upgrade completed"
          - "Previous version: {{ current_coredns_version }}"
          - "Current version: {{ final_coredns_version }}"
          - "Target version: v{{ coredns_target_version }}"
          - "Running pods: {{ coredns_pod_count }}"
          - "DNS test result: {{ 'PASSED' if dns_test_result.rc == 0 else 'FAILED' }}"
          - "Upgrade needed: {{ coredns_upgrade_needed }}"
