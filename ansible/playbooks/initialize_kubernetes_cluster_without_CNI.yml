---
# Playbook to initialize Kubernetes cluster on control plane and join worker nodes
- name: Initialize Kubernetes Cluster
  hosts: control_plane
  become: yes
  gather_facts: yes
  vars:
    pod_cidr: "192.164.0.0/16"  # Default for Calico
    
  tasks:
    - name: Check if cluster is already initialized
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: kubeconfig_exists

    - name: Initialize Kubernetes cluster with kubeadm
      ansible.builtin.command: >
        kubeadm init
        --pod-network-cidr={{ pod_cidr }}
        --apiserver-advertise-address={{ ansible_default_ipv4.address }}
        --control-plane-endpoint={{ ansible_default_ipv4.address }}
      register: kubeadm_init_result
      when: not kubeconfig_exists.stat.exists
      changed_when: true

    - name: Create .kube directory for root
      ansible.builtin.file:
        path: /root/.kube
        state: directory
        mode: '0755'
      when: not kubeconfig_exists.stat.exists

    - name: Copy admin.conf to root's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: '0644'
      when: not kubeconfig_exists.stat.exists

    - name: Create .kube directory for regular user
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      when: not kubeconfig_exists.stat.exists

    - name: Copy admin.conf to user's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      when: not kubeconfig_exists.stat.exists

    - name: Extract join command
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: join_command_output
      when: not kubeconfig_exists.stat.exists

    - name: Save join command to file
      ansible.builtin.copy:
        content: "{{ join_command_output.stdout }}"
        dest: /tmp/kubeadm_join_command.sh
        mode: '0755'
      when: not kubeconfig_exists.stat.exists

    - name: Fetch join command to local machine
      ansible.builtin.fetch:
        src: /tmp/kubeadm_join_command.sh
        dest: /tmp/kubeadm_join_command.sh
        flat: yes
      when: not kubeconfig_exists.stat.exists

    - name: Display cluster initialization status
      ansible.builtin.debug:
        msg: |
          Kubernetes cluster initialized successfully!
          Join command saved to /tmp/kubeadm_join_command.sh
          
          Next steps:
          1. Install CNI plugin (Calico)
          2. Join worker nodes
      when: not kubeconfig_exists.stat.exists

- name: Join Worker Nodes to Cluster
  hosts: workers
  become: yes
  gather_facts: yes
  tasks:
    - name: Check if node is already part of cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_exists

    - name: Copy join command to worker nodes
      ansible.builtin.copy:
        src: /tmp/kubeadm_join_command.sh
        dest: /tmp/kubeadm_join_command.sh
        mode: '0755'
      when: not kubelet_conf_exists.stat.exists

    - name: Join worker nodes to cluster
      ansible.builtin.shell: /tmp/kubeadm_join_command.sh
      when: not kubelet_conf_exists.stat.exists
      register: join_result
      changed_when: true

    - name: Display join result
      ansible.builtin.debug:
        msg: "Worker node {{ inventory_hostname }} joined cluster successfully"
      when: not kubelet_conf_exists.stat.exists

- name: Verify Cluster Status
  hosts: control_plane
  become: yes
  gather_facts: no
  tasks:
    - name: Get cluster nodes
      ansible.builtin.shell: kubectl get nodes -o wide
      register: cluster_nodes
      changed_when: false

    - name: Display cluster status
      ansible.builtin.debug:
        msg: |
          Cluster Status:
          {{ cluster_nodes.stdout }}

    - name: Get cluster pods
      ansible.builtin.shell: kubectl get pods --all-namespaces
      register: cluster_pods
      changed_when: false

    - name: Display pod status
      ansible.builtin.debug:
        msg: |
          Pod Status:
          {{ cluster_pods.stdout }}
