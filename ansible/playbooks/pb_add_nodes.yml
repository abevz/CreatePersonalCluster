---
- name: Add New Nodes to Kubernetes Cluster
  hosts: "{{ target_hosts | default('workers') }}" # Target new worker nodes
  become: yes
  gather_facts: yes

  vars:
    join_token: "" # Will be generated if not provided
    discovery_token_ca_cert_hash: "" # Will be discovered if not provided

  tasks:
    - name: Gather facts from control plane
      setup:
      delegate_to: "{{ groups['control_plane'][0] }}"
      delegate_facts: yes
      run_once: true

    - name: Set control plane endpoint
      set_fact:
        control_plane_endpoint: "{{ hostvars[groups['control_plane'][0]]['ansible_default_ipv4']['address'] + ':6443' }}"

    - name: Generate join token if not provided
      delegate_to: "{{ groups['control_plane'][0] }}"
      shell: kubeadm token create --print-join-command
      register: join_command_output
      when: join_token == '' or discovery_token_ca_cert_hash == ''
      run_once: true

    - name: Parse join command
      set_fact:
        join_token: "{{ join_command_output.stdout.split(' ')[4] }}"
        discovery_token_ca_cert_hash: "{{ join_command_output.stdout.split(' ')[6] }}"
      when: join_command_output is defined and join_command_output.stdout is defined

    - name: Display join information
      debug:
        msg:
          - "Join Token: {{ join_token }}"
          - "Discovery Hash: {{ discovery_token_ca_cert_hash }}"
          - "Control Plane Endpoint: {{ control_plane_endpoint }}"

    - name: Remove containerd config if it exists
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes

    - name: Check if node is already part of cluster
      shell: kubectl get nodes --no-headers | grep -w "{{ inventory_hostname }}" || true
      delegate_to: "{{ groups['control_plane'][0] }}"
      register: node_exists
      changed_when: false

    - name: Check kubelet service status
      command: systemctl is-active kubelet
      register: kubelet_status
      changed_when: false
      ignore_errors: true

    - name: Reset node if it exists in cluster but kubelet is not running
      shell: kubeadm reset --force
      when:
        - node_exists.stdout != ""
        - kubelet_status.rc != 0

    - name: Join node to Kubernetes cluster
      shell: |
        kubeadm join {{ control_plane_endpoint }} \
          --token {{ join_token }} \
          --discovery-token-ca-cert-hash {{ discovery_token_ca_cert_hash }}
      when: node_exists.stdout == ""
      register: join_result

    - name: Display join result
      debug:
        var: join_result
      when: join_result is defined and join_result.stdout_lines is defined

    - name: Verify node joined successfully
      shell: kubectl get nodes --no-headers | grep -w "{{ inventory_hostname }}"
      delegate_to: "{{ groups['control_plane'][0] }}"
      register: verify_join
      retries: 5
      delay: 10
      until: verify_join.rc == 0

    - name: Wait for node to be Ready
      shell: kubectl get nodes {{ inventory_hostname }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
      delegate_to: "{{ groups['control_plane'][0] }}"
      register: node_ready
      retries: 30
      delay: 10
      until: node_ready.stdout == "True"

    - name: Display node status
      shell: kubectl get nodes {{ inventory_hostname }} -o wide
      delegate_to: "{{ groups['control_plane'][0] }}"
      register: node_status

    - name: Show final node status
      debug:
        var: node_status.stdout_lines

    - name: Wait for kubelet serving CSRs to be created for new nodes
      shell: kubectl get csr --no-headers | grep -c "kubelet-serving" || echo "0"
      delegate_to: "{{ groups['control_plane'][0] }}"
      register: csr_count_check
      until: csr_count_check.stdout|int > 0
      retries: 10
      delay: 10
      changed_when: false
      ignore_errors: true
      run_once: true

    - name: Check for pending kubelet serving CSRs after node addition
      shell: kubectl get csr --no-headers | grep "kubelet-serving" | grep "Pending" | wc -l
      delegate_to: "{{ groups['control_plane'][0] }}"
      register: pending_csr_count_after_join
      changed_when: false
      ignore_errors: true
      run_once: true

    - name: Approve pending kubelet serving CSRs for new nodes
      shell: kubectl get csr -o name | grep "kubelet-serving" | xargs -r kubectl certificate approve
      delegate_to: "{{ groups['control_plane'][0] }}"
      when: pending_csr_count_after_join.stdout|int > 0
      register: csr_approval_result_add_nodes
      changed_when: true
      run_once: true

    - name: Display CSR approval result after node addition
      debug:
        msg: |
          CSR Approval Result for New Nodes:
          Pending CSRs found: {{ pending_csr_count_after_join.stdout }}
          {% if pending_csr_count_after_join.stdout|int > 0 %}
          Approved CSRs: {{ csr_approval_result_add_nodes.stdout }}
          {% else %}
          No pending kubelet serving CSRs found after node addition.
          {% endif %}
      run_once: true
