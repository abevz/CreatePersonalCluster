---
- name: Upgrade Cluster Addons
  hosts: "{{ target_hosts | default('control_plane') }}"
  become: yes
  gather_facts: no

  vars:
    addon_name: "{{ addon_name | default('all') }}" # calico, coredns, metallb, metrics-server, cert-manager, kubelet-serving-cert-approver, argocd, ingress-nginx, or 'all'
    addon_version: "{{ addon_version | default('latest') }}" # Specific version or 'latest'
    control_plane_node: "{{ groups['control_plane'][0] }}"
    
    # Default addon versions from environment
    default_calico_version: "{{ calico_version | default('v3.28.0') }}"
    default_metallb_version: "{{ metallb_version | default('v0.14.8') }}"
    default_metrics_server_version: "{{ metrics_server_version | default('v0.7.2') }}"
    default_coredns_version: "{{ coredns_version | default('v1.11.3') }}"
    default_cert_manager_version: "{{ cert_manager_version | default('v1.16.2') }}"
    default_kubelet_serving_cert_approver_version: "{{ kubelet_serving_cert_approver_version | default('v0.9.2') }}"
    default_argocd_version: "{{ argocd_version | default('v2.13.2') }}"
    default_ingress_nginx_version: "{{ ingress_nginx_version | default('v1.12.0') }}"

  tasks:
    - name: Set target host to control plane
      set_fact:
        ansible_host: "{{ hostvars[control_plane_node]['ansible_host'] }}"
      when: inventory_hostname != control_plane_node

    - name: Check current Calico version
      shell: kubectl get pods -n calico-system -o jsonpath='{.items[0].spec.containers[0].image}' | cut -d':' -f2
      register: current_calico_version
      when: addon_name in ['calico', 'all']
      ignore_errors: yes

    - name: Upgrade Calico CNI
      block:
        - name: Download Calico operator manifest
          get_url:
            url: "https://raw.githubusercontent.com/projectcalico/calico/{{ addon_version }}/manifests/tigera-operator.yaml"
            dest: "/tmp/tigera-operator-{{ addon_version }}.yaml"

        - name: Download Calico custom resources
          get_url:
            url: "https://raw.githubusercontent.com/projectcalico/calico/{{ addon_version }}/manifests/custom-resources.yaml"
            dest: "/tmp/calico-custom-resources-{{ addon_version }}.yaml"

        - name: Apply Calico operator (replace instead of apply)
          shell: kubectl replace --force -f /tmp/tigera-operator-{{ addon_version }}.yaml || kubectl apply -f /tmp/tigera-operator-{{ addon_version }}.yaml

        - name: Wait for tigera operator to be ready
          shell: kubectl wait --for=condition=ready pod -l k8s-app=tigera-operator -n tigera-operator --timeout=300s

        - name: Apply Calico custom resources
          shell: kubectl apply -f /tmp/calico-custom-resources-{{ addon_version }}.yaml

        - name: Wait for Calico pods to be created
          shell: |
            timeout 300 bash -c '
              while true; do
                if kubectl get pods -n calico-system -l k8s-app=calico-node --no-headers 2>/dev/null | grep -q calico-node; then
                  echo "Calico pods found"
                  break
                fi
                echo "Waiting for Calico pods to be created..."
                sleep 5
              done
            '

        - name: Wait for Calico pods to be ready
          shell: kubectl wait --for=condition=ready pod -l k8s-app=calico-node -n calico-system --timeout=300s

        - name: Verify Calico upgrade
          shell: kubectl get pods -n calico-system -o jsonpath='{.items[0].spec.containers[0].image}' | cut -d':' -f2
          register: new_calico_version

        - name: Display Calico upgrade result
          debug:
            msg:
              - "Calico upgrade completed"
              - "Previous version: {{ current_calico_version.stdout | default('unknown') }}"
              - "Current version: {{ new_calico_version.stdout }}"

      when: addon_name in ['calico', 'all']

    - name: Check current MetalLB version
      shell: kubectl get deployment -n metallb-system controller -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d':' -f2
      register: current_metallb_version
      when: addon_name in ['metallb', 'all']
      ignore_errors: yes

    - name: Upgrade MetalLB
      block:
        - name: Apply MetalLB native manifests
          shell: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/{{ addon_version if addon_version != 'latest' else default_metallb_version }}/config/manifests/metallb-native.yaml

        - name: Wait for MetalLB pods to be ready
          shell: kubectl wait --for=condition=ready pod -l app=metallb -n metallb-system --timeout=300s

        - name: Verify MetalLB upgrade
          shell: kubectl get deployment -n metallb-system controller -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d':' -f2
          register: new_metallb_version

        - name: Display MetalLB upgrade result
          debug:
            msg:
              - "MetalLB upgrade completed"
              - "Previous version: {{ current_metallb_version.stdout | default('unknown') }}"
              - "Current version: {{ new_metallb_version.stdout }}"

      when: addon_name in ['metallb', 'all'] and current_metallb_version is not failed

    - name: Check current Metrics Server version
      shell: kubectl get deployment -n kube-system metrics-server -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d':' -f2
      register: current_metrics_server_version
      when: addon_name in ['metrics-server', 'all']
      ignore_errors: yes

    - name: Upgrade Metrics Server
      block:
        - name: Download Metrics Server manifests
          get_url:
            url: "https://github.com/kubernetes-sigs/metrics-server/releases/download/{{ addon_version if addon_version != 'latest' else default_metrics_server_version }}/components.yaml"
            dest: "/tmp/metrics-server-{{ addon_version if addon_version != 'latest' else default_metrics_server_version }}.yaml"

        - name: Patch Metrics Server for self-hosted clusters
          shell: |
            sed -i '/--metric-resolution=15s/a\        - --kubelet-insecure-tls' /tmp/metrics-server-{{ addon_version if addon_version != 'latest' else default_metrics_server_version }}.yaml

        - name: Apply Metrics Server manifests
          shell: kubectl apply -f /tmp/metrics-server-{{ addon_version if addon_version != 'latest' else default_metrics_server_version }}.yaml

        - name: Wait for Metrics Server to be ready
          shell: kubectl wait --for=condition=ready pod -l k8s-app=metrics-server -n kube-system --timeout=300s

        - name: Verify Metrics Server upgrade
          shell: kubectl get deployment -n kube-system metrics-server -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d':' -f2
          register: new_metrics_server_version

        - name: Display Metrics Server upgrade result
          debug:
            msg:
              - "Metrics Server upgrade completed"
              - "Previous version: {{ current_metrics_server_version.stdout | default('unknown') }}"
              - "Current version: {{ new_metrics_server_version.stdout }}"

      when: addon_name in ['metrics-server', 'all'] and current_metrics_server_version is not failed

    - name: Check current CoreDNS version
      shell: kubectl get deployment -n kube-system coredns -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d':' -f2
      register: current_coredns_version
      when: addon_name in ['coredns', 'all']
      ignore_errors: yes

    - name: Upgrade CoreDNS
      block:
        - name: Update CoreDNS image
          shell: |
            kubectl set image deployment/coredns -n kube-system \
              coredns=registry.k8s.io/coredns/coredns:{{ addon_version if addon_version != 'latest' else default_coredns_version }}

        - name: Wait for CoreDNS rollout to complete
          shell: kubectl rollout status deployment/coredns -n kube-system --timeout=300s

        - name: Verify CoreDNS upgrade
          shell: kubectl get deployment -n kube-system coredns -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d':' -f2
          register: new_coredns_version

        - name: Display CoreDNS upgrade result
          debug:
            msg:
              - "CoreDNS upgrade completed"
              - "Previous version: {{ current_coredns_version.stdout | default('unknown') }}"
              - "Current version: {{ new_coredns_version.stdout }}"

      when: addon_name in ['coredns', 'all'] and current_coredns_version is not failed

    - name: Final addon status check
      shell: kubectl get pods --all-namespaces | grep -E "(calico|metallb|metrics-server|coredns)"
      register: final_addon_status
      ignore_errors: yes

    - name: Display final addon status
      debug:
        msg:
          - "Final addon status:"
          - "{{ final_addon_status.stdout_lines }}"
      when: final_addon_status.stdout_lines is defined

    - name: Cleanup Calico temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/tigera-operator-{{ addon_version }}.yaml"
        - "/tmp/calico-custom-resources-{{ addon_version }}.yaml"
      when: addon_name in ['calico', 'all']

    - name: Cleanup Metrics Server temporary files
      file:
        path: "/tmp/metrics-server-{{ addon_version if addon_version != 'latest' else default_metrics_server_version }}.yaml"
        state: absent
      when: addon_name in ['metrics-server', 'all']
