---
# Playbook to install Kubernetes (kubeadm, kubelet, kubectl) and container runtime (containerd)
# Handles Debian/Ubuntu (Debian family) and Rocky Linux (RedHat family)

- name: Bootstrap Kubernetes Cluster Prerequisites and Components
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    kubernetes_version: "{{ KUBERNETES_SHORT_VERSION | default('1.29') }}"
    harbor_hostname: "{{ HARBOR_HOSTNAME }}" 
    harbor_robot_username: "{{ HARBOR_ROBOT_USER | default('k8s-puller') }}"
    harbor_robot_token: "{{ HARBOR_ROBOT_TOKEN | default('') }}"

  pre_tasks:

    - name: Encode data for Harbor authorization
      ansible.builtin.set_fact:
        harbor_auth: "{{ [harbor_robot_username,harbor_robot_token] | join(':') | b64encode }}"    

    - name: Update package cache (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      changed_when: false

    - name: Ensure EPEL repo is enabled (Rocky Linux)
      ansible.builtin.dnf:
        name: epel-release
        state: present
      when: ansible_os_family == "RedHat"
      register: epel_install
      failed_when: "epel_install.rc != 0 and 'Nothing to do' not in epel_install.stdout and 'already installed' not in epel_install.msg"

    - name: Disable swap
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0
      changed_when: false

    - name: Remove swap from fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
      when: ansible_swaptotal_mb > 0

  tasks:
    # ... (kernel configuration and containerd installation tasks remain unchanged) ...
    - name: Load kernel modules for container runtime and networking
      ansible.builtin.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Persist kernel modules
      ansible.builtin.copy:
        dest: "/etc/modules-load.d/k8s.conf"
        content: |
          overlay
          br_netfilter
        mode: '0644'

    - name: Configure sysctl for Kubernetes networking
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
        state: present
        reload: yes
      loop:
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

    - name: Install Containerd prerequisites (common)
      ansible.builtin.package:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Add Docker GPG key (Debian/Ubuntu)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        force: true
      when: ansible_os_family == "Debian"

    - name: Add Docker repository (Debian/Ubuntu)
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ ansible_architecture if ansible_architecture == 'aarch64' else 'amd64' }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      when: ansible_os_family == "Debian"
      notify: Update apt cache

    - name: Add Docker CE repository (Rocky Linux)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      when: ansible_os_family == "RedHat"

    - name: Install containerd.io (Debian/Ubuntu)
      ansible.builtin.apt:
        name: containerd.io
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install containerd.io (Rocky Linux)
      ansible.builtin.dnf:
        name: containerd.io
        state: present
      when: ansible_os_family == "RedHat"

    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Create containerd configuration from template
      ansible.builtin.template:
        src: ../templates/containerd-config.toml.j2
        dest: /etc/containerd/config.toml
        owner: root
        group: root
        mode: '0644'
      notify: Restart containerd        

    - name: Enable and start containerd service
      ansible.builtin.systemd:
        name: containerd
        state: started
        enabled: yes

# ... after the "Enable and start containerd service" task

    - name: Ensure containerd certs directory exists
      ansible.builtin.file:
        path: "/etc/containerd/certs.d/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "docker.io"
        - "quay.io"
        - "gcr.io"
        - "registry.k8s.io"
        - "k8s.gcr.io"
        - "{{ harbor_hostname }}"  

    - name: Configure Harbor proxy for docker.io
      ansible.builtin.template:
        src: ../templates/hosts.toml.j2
        dest: /etc/containerd/certs.d/docker.io/hosts.toml
        owner: root
        group: root
        mode: '0644'
      vars:
        upstream_server: "https://docker.io"
        proxy_project: "dockerhub-proxy"
      notify: Restart containerd

    - name: Configure Harbor proxy for quay.io
      ansible.builtin.template:
        src: ../templates/hosts.toml.j2
        dest: /etc/containerd/certs.d/quay.io/hosts.toml
        owner: root
        group: root
        mode: '0644'
      vars:
        upstream_server: "https://quay.io"
        proxy_project: "quay-proxy"
      notify: Restart containerd

    - name: Configure Harbor proxy for gcr.io
      ansible.builtin.template:
        src: ../templates/hosts.toml.j2
        dest: /etc/containerd/certs.d/gcr.io/hosts.toml
        owner: root
        group: root
        mode: '0644'
      vars:
        upstream_server: "https://gcr.io"
        proxy_project: "gcr-proxy"
      notify: Restart containerd

    - name: Configure Harbor proxy for registry.k8s.io
      ansible.builtin.template:
        src: ../templates/hosts.toml.j2
        dest: /etc/containerd/certs.d/registry.k8s.io/hosts.toml
        owner: root
        group: root
        mode: '0644'
      vars:
        upstream_server: "https://registry.k8s.io"
        proxy_project: "k8s-proxy"
      notify: Restart containerd

    - name: Configure Harbor proxy for k8s.gcr.io
      ansible.builtin.template:
        src: ../templates/hosts.toml.j2
        dest: /etc/containerd/certs.d/k8s.gcr.io/hosts.toml
        owner: root
        group: root
        mode: '0644'
      vars:
        upstream_server: "https://k8s.gcr.io"
        proxy_project: "k8s-proxy"
      notify: Restart containerd        

    - name: Configure Harbor proxy for Harbor
      ansible.builtin.template:
        src: ../templates/hosts_harbor.toml.j2
        dest: /etc/containerd/certs.d/{{ harbor_hostname }}/hosts.toml
        owner: root
        group: root
        mode: '0644'
      vars:
        upstream_server: "https://{{ harbor_hostname }}"
        proxy_project: "k8s-proxy"
      notify: Restart containerd        

    # ... next are Kubernetes installation tasks
    # ... (other tasks for installing kubelet, kubeadm, etc. remain unchanged) ...
    - name: Add Kubernetes GPG key (Debian/Ubuntu)
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key"
        dest: "/etc/apt/keyrings/kubernetes-apt-keyring.asc"
        mode: '0644'
      when: ansible_os_family == "Debian"

    - name: Add Kubernetes apt repository (Debian/Ubuntu)
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
        state: present
        filename: kubernetes
      when: ansible_os_family == "Debian"
      notify: Update apt cache

    - name: Add Kubernetes yum repository (Rocky Linux)
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes
        baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/"
        gpgkey:
          - "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/repodata/repomd.xml.key"
        gpgcheck: yes
        repo_gpgcheck: yes
        enabled: yes
      when: ansible_os_family == "RedHat"

    - name: Install kubelet, kubeadm, kubectl (Debian/Ubuntu)
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      notify: Hold Kubernetes packages Debian

    - name: Install kubelet, kubeadm, kubectl (Rocky Linux)
      ansible.builtin.dnf:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        disable_excludes: kubernetes
      when: ansible_os_family == "RedHat"
      notify: Hold Kubernetes packages RedHat

    - name: Install Python Kubernetes client library for all OS families
      block:
        - name: Install for Debian/Ubuntu
          ansible.builtin.apt:
            name: python3-kubernetes
            state: present
            update_cache: yes
          when: ansible_os_family == "Debian"
        - name: Install for Rocky Linux/RHEL
          ansible.builtin.dnf:
            name: python3-kubernetes
            state: present
          when: ansible_os_family == "RedHat"
        - name: Install for SUSE/SLES
          ansible.builtin.zypper:
            name: python3-kubernetes
            state: present
          when: ansible_os_family == "Suse"
      become: yes

    - name: Install jmespath for json_query filter
      block:
        - name: Install for Debian/Ubuntu
          ansible.builtin.apt:
            name: python3-jmespath
            state: present
          when: ansible_os_family == "Debian"
        - name: Install for Rocky Linux/RHEL
          ansible.builtin.dnf:
            name: python3-jmespath
            state: present
          when: ansible_os_family == "RedHat"
        - name: Install for SUSE/SLES
          ansible.builtin.zypper:
            name: python3-jmespath
            state: present
          when: ansible_os_family == "Suse"
      become: yes

    - name: Set SELinux to permissive (Rocky Linux - for simplicity, consider proper policies for production)
      ansible.builtin.selinux:
        policy: targeted
        state: permissive
      when: ansible_os_family == "RedHat" and ansible_selinux.status == "enabled"

    - name: Enable and start kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: yes

    - name: Placeholder - Indicate K8s setup would start here
      ansible.builtin.debug:
        msg: "Kubernetes components (kubelet, kubeadm, kubectl) and containerd installed on {{ inventory_hostname }} ({{ ansible_os_family }}). Ready for kubeadm init/join."

  handlers:
    # ... (all handlers remain unchanged) ...
    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Hold Kubernetes packages Debian
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
      when: ansible_os_family == "Debian"

    - name: Hold Kubernetes packages RedHat
      ansible.builtin.command: "dnf versionlock add {{ item }}"
      loop:
        - kubelet
        - kubeadm
        - kubectl
      when: ansible_os_family == "RedHat"
